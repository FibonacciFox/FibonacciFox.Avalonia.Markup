using FibonacciFox.Avalonia.Markup.Helpers;
using FibonacciFox.Avalonia.Markup.Models.Properties;
using FibonacciFox.Avalonia.Markup.Models.Visual;
using FibonacciFox.Avalonia.Markup.Models.Visual.Interfaces;

namespace FibonacciFox.Avalonia.Markup.Demo;

/// <summary>
/// –ü–µ—á–∞—Ç–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ Avalonia –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é –º–∞—Ä–∫–∏—Ä–æ–≤–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ç–∏–ø–∞–º –∑–Ω–∞—á–µ–Ω–∏–π.
/// </summary>
public static class TreePrinter
{
    /// <summary>
    /// –ü–µ—á–∞—Ç–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
    /// </summary>
    /// <param name="element">–ö–æ—Ä–Ω–µ–≤–æ–π <see cref="VisualElement"/>.</param>
    /// <param name="indent">–û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ).</param>
    /// <param name="isLast">–£–∫–∞–∑—ã–≤–∞–µ—Ç, –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º —Å–ø–∏—Å–∫–µ.</param>
    public static void PrintVisualTree(VisualElement element, string indent = "", bool isLast = true)
    {
        string prefix = isLast ? "‚îî" : "‚îú";
        string childIndent = indent + (isLast ? "   " : "‚îÇ  ");

        // üé® –¶–≤–µ—Ç –ø–æ ValueKind
        ConsoleColor GetKindColor(AvaloniaValueKind kind) => kind switch
        {
            AvaloniaValueKind.Control => ConsoleColor.Cyan,
            AvaloniaValueKind.Logical => ConsoleColor.DarkCyan,
            AvaloniaValueKind.StyledClasses => ConsoleColor.Magenta,
            AvaloniaValueKind.Complex => ConsoleColor.DarkYellow,
            AvaloniaValueKind.Brush => ConsoleColor.Green,
            AvaloniaValueKind.Template => ConsoleColor.DarkGray,
            AvaloniaValueKind.Binding => ConsoleColor.Blue,
            AvaloniaValueKind.Resource => ConsoleColor.DarkGreen,
            _ => ConsoleColor.Gray
        };

        // üß© –ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞
        Console.ForegroundColor = ConsoleColor.Cyan;
        string name = element is ControlElement ctrl && !string.IsNullOrWhiteSpace(ctrl.Name)
            ? ctrl.DisplayName
            : element.ElementType ?? "Unknown";

        Console.Write($"{indent}{prefix} Element: {name}");

        Console.ForegroundColor = GetKindColor(element.ValueKind);
        Console.Write($" (Kind: {element.ValueKind})");

        if (element.IsContainsControl)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.Write(" [HasChildControls]");
        }

        Console.ResetColor();
        Console.WriteLine();

        // üßæ –°–≤–æ–π—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        void PrintProperty(AvaloniaPropertyModel prop, string category)
        {
            ConsoleColor catColor = category switch
            {
                "StyledProperty" => ConsoleColor.Yellow,
                "AttachedProperty" => ConsoleColor.Magenta,
                "DirectProperty" => ConsoleColor.Green,
                "ClrProperty" => ConsoleColor.Blue,
                _ => ConsoleColor.White
            };

            Console.ForegroundColor = catColor;
            Console.Write($"{childIndent} ‚ñ† {category}: ");
            Console.ResetColor();

            Console.Write($"{prop.Name} = {prop.Value} ");

            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Write("(Kind: ");
            Console.ForegroundColor = GetKindColor(prop.ValueKind);
            Console.Write($"{prop.ValueKind}");
            Console.ResetColor();

            Console.Write(", Xaml: ");
            Console.ForegroundColor = prop.CanBeSerializedToXaml ? ConsoleColor.Green : ConsoleColor.DarkRed;
            Console.Write(prop.CanBeSerializedToXaml ? "yes" : "no");

            if (prop.IsContainsControl)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.Write(", ContainsControl: true");
            }

            if (prop.IsRuntimeOnly)
            {
                Console.ForegroundColor = ConsoleColor.DarkRed;
                Console.Write(", RuntimeOnly: true");
            }

            Console.ResetColor();
            Console.WriteLine();

            // üîΩ –í–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if (prop.SerializedValue is { } inner && prop.ValueKind != AvaloniaValueKind.Simple)
                PrintVisualTree(inner, childIndent, true);
        }

        // ‚öôÔ∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–≤–æ–π—Å—Ç–≤
        foreach (var p in element.StyledProperties) PrintProperty(p, "StyledProperty");
        foreach (var p in element.AttachedProperties) PrintProperty(p, "AttachedProperty");
        foreach (var p in element.DirectProperties) PrintProperty(p, "DirectProperty");
        foreach (var p in element.ClrProperties) PrintProperty(p, "ClrProperty");

        // üì• Content
        if (element is IContentElement content && content.Content is { } contentValue)
        {
            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine($"{childIndent} ‚ñ∏ Content:");
            Console.ResetColor();
            PrintVisualTree(contentValue, childIndent + "  ", true);
        }

        // üè∑ Header
        if (element is IHeaderedElement headered && headered.Header is { } headerValue)
        {
            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine($"{childIndent} ‚ñ∏ Header:");
            Console.ResetColor();
            PrintVisualTree(headerValue, childIndent + "  ", true);
        }

        // üìã Items
        if (element is IItemsElement items && items.Items.Count > 0)
        {
            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine($"{childIndent} ‚ñ∏ Items:");
            Console.ResetColor();

            for (int i = 0; i < items.Items.Count; i++)
            {
                var item = items.Items[i];
                bool last = i == items.Items.Count - 1;
                PrintVisualTree(item, childIndent + "  ", last);
            }
        }

        // üë∂ –û–±—ã—á–Ω—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        for (int i = 0; i < element.Children.Count; i++)
        {
            var child = element.Children[i];
            bool last = i == element.Children.Count - 1;
            PrintVisualTree(child, childIndent, last);
        }
    }
}
