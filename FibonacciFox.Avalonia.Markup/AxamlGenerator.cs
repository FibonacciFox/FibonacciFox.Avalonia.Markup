using System.Xml.Linq;
using FibonacciFox.Avalonia.Markup.Helpers;
using FibonacciFox.Avalonia.Markup.Models.Visual;
using FibonacciFox.Avalonia.Markup.Models.Visual.Interfaces;

namespace FibonacciFox.Avalonia.Markup;

/// <summary>
/// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç AXAML-–¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ Avalonia —Å –ø–æ–º–æ—â—å—é LINQ to XML.
/// </summary>
public static class AxamlGenerator
{
    public static string GenerateAxaml(VisualElement root)
    {
        var rootElement = GenerateElement(root);
        var document = new XDocument(rootElement);
        return document.ToString();
    }

    private static XElement GenerateElement(VisualElement element)
    {
        // ‚ö† –ï—Å–ª–∏ ElementType == null, —ç—Ç–æ "–æ–±—ë—Ä—Ç–∫–∞", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (element.ElementType == null)
        {
            var placeholder = new XElement("Placeholder"); // –≤—Ä–µ–º–µ–Ω–Ω–æ
            foreach (var child in element.Children)
                placeholder.Add(GenerateElement(child));

            return placeholder;
        }

        string tag = element.ElementType;
        var xmlElement = new XElement(tag);

        if (tag == "UserControl")
        {
            xmlElement.Add(
                new XAttribute("xmlns", "https://github.com/avaloniaui"),
                new XAttribute(XNamespace.Xmlns + "x", "http://schemas.microsoft.com/winfx/2006/xaml"),
                new XAttribute(XName.Get("Class", "http://schemas.microsoft.com/winfx/2006/xaml"), "GeneratedNamespace.MyUserControl")
            );
        }

        // üß± –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ ‚Äî –≤ –∞—Ç—Ä–∏–±—É—Ç—ã
        foreach (var prop in element.GetAllProperties(includeAttached: false))
        {
            if (prop.CanBeSerializedToXaml && !string.IsNullOrWhiteSpace(prop.Value))
                xmlElement.SetAttributeValue(prop.Name, prop.Value);
        }

        // üè∑ Header
        if (element is IHeaderedElement headered && headered.Header is VisualElement header)
        {
            xmlElement.Add(new XElement($"{tag}.Header", GenerateElement(header)));
        }

        // üì• Content
        if (element is IContentElement contentHolder && contentHolder.Content is VisualElement content)
        {
            if (content.ElementType == null)
            {
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ <Controls>)
                foreach (var child in content.Children)
                    xmlElement.Add(GenerateElement(child));
            }
            else if (content.ValueKind == AvaloniaValueKind.Simple && content.OriginalInstance is string str)
            {
                xmlElement.SetAttributeValue("Content", str);
            }
            else
            {
                xmlElement.Add(GenerateElement(content));
            }
        }

        // üìã Items
        if (element is IItemsElement items && items.Items.Count > 0)
        {
            foreach (var item in items.Items)
                xmlElement.Add(GenerateElement(item));
        }

        // üìé Attached —Å–≤–æ–π—Å—Ç–≤–∞
        foreach (var attached in element.AttachedProperties)
        {
            if (attached.IsContainsControl && attached.SerializedValue is VisualElement nested)
            {
                xmlElement.Add(new XElement(attached.Name, GenerateElement(nested)));
            }
            else if (attached.CanBeSerializedToXaml && !string.IsNullOrWhiteSpace(attached.Value))
            {
                xmlElement.SetAttributeValue(attached.Name, attached.Value);
            }
        }

        // üë∂ –û–±—ã—á–Ω—ã–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        foreach (var child in element.Children)
        {
            xmlElement.Add(GenerateElement(child));
        }

        return xmlElement;
    }
}
