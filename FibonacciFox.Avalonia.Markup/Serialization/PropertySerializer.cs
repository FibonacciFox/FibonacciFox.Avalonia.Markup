using System.Reflection;
using Avalonia;
using Avalonia.Controls;
using FibonacciFox.Avalonia.Markup.Models.Properties;
using FibonacciFox.Avalonia.Markup.Models.Visual;

namespace FibonacciFox.Avalonia.Markup.Serialization;

/// <summary>
/// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∞ –≤ –º–æ–¥–µ–ª–∏ <see cref="AvaloniaPropertyModel"/>:
/// styled, attached, direct –∏ CLR.
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AXAML.
/// </summary>
public static class PropertySerializer
{
    /// <summary>
    /// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∏—Ö –≤ <see cref="VisualElement"/>.
    /// </summary>
    /// <param name="control">–≠–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ç—Ä–æ–ª–∞.</param>
    /// <param name="element">–¶–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–µ—Ä–µ–≤–∞, –∫—É–¥–∞ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è —Å–≤–æ–π—Å—Ç–≤–∞.</param>
    public static void SerializeProperties(Control control, VisualElement element)
    {
        var addedNames = new HashSet<string>(StringComparer.OrdinalIgnoreCase);

        // üü° Styled-—Å–≤–æ–π—Å—Ç–≤–∞
        var styled = AvaloniaPropertyRegistry.Instance.GetRegistered(control.GetType());
        foreach (var prop in styled)
        {
            var node = StyledAvaloniaPropertyModel.From(prop, control);
            if (node != null)
            {
                element.StyledProperties.Add(node);
                addedNames.Add(prop.Name);
            }
        }

        // üü£ Attached-—Å–≤–æ–π—Å—Ç–≤–∞
        var attached = AvaloniaPropertyRegistry.Instance.GetRegisteredAttached(control.GetType());
        foreach (var prop in attached)
        {
            var node = AttachedAvaloniaPropertyModel.From(prop, control);
            if (node != null)
            {
                element.AttachedProperties.Add(node);
            }
        }

        // üü¢ Direct-—Å–≤–æ–π—Å—Ç–≤–∞
        var direct = AvaloniaPropertyRegistry.Instance.GetRegisteredDirect(control.GetType());
        foreach (var prop in direct)
        {
            var node = DirectAvaloniaPropertyModel.From(prop, control);
            if (node != null)
            {
                element.DirectProperties.Add(node);
                addedNames.Add(prop.Name);
            }
        }

        // üîµ CLR-—Å–≤–æ–π—Å—Ç–≤–∞
        var clr = control.GetType().GetProperties(BindingFlags.Public | BindingFlags.Instance);
        foreach (var prop in clr)
        {
            if (addedNames.Contains(prop.Name))
                continue;

            var node = ClrAvaloniaPropertyModel.From(prop, control);
            if (node != null)
            {
                element.ClrProperties.Add(node);
            }
        }
    }
}
